/*
 * This Kotlin source file was generated by the Gradle 'init' task.
 */
package de.gipmbh.gradle.plugins.release

import org.eclipse.jgit.api.Git
import org.eclipse.jgit.api.InitCommand
import org.gradle.testkit.runner.GradleRunner
import org.junit.Rule
import org.junit.rules.TemporaryFolder
import java.io.File
import kotlin.test.Test
import kotlin.test.assertTrue

/**
 * A simple functional test for the 'de.gipmbh.gradle.plugins.release.greeting' plugin.
 */
class GipReleasePluginFunctionalTest {
    @get:Rule
    val tempFolder: TemporaryFolder = TemporaryFolder()

    private fun getProjectDir() = tempFolder.root
    private fun getBuildFile() = getProjectDir().resolve("build.gradle.kts")
    private fun getSettingsFile() = getProjectDir().resolve("settings.gradle.kts")

    private fun setup(): Unit {
        getProjectDir().resolve("README.md").writeText(
            """
            hello, world!
        """.trimIndent()
        )

        getProjectDir().resolve(".gitignore").writeText(
            """
                .gradle
                build
            """.trimIndent()
        )

        val git: Git = InitCommand().setDirectory(getProjectDir()).setInitialBranch("master").call()
        git.add().addFilepattern(".").call()
        git.commit().setMessage("init").call()
    }

    @Test
    fun `can run task`() {

        setup()

        val readText: String = File("/home/tom/src/gradle/gip-release/consumer/build.gradle.kts").readText(Charsets.UTF_8)

        getSettingsFile().writeText("")
        getBuildFile().writeText(
           readText
        )

        // Run the build
        val runner = GradleRunner.create()
        runner.forwardOutput()
        runner.withPluginClasspath()
        runner.withArguments("currentVersion")
        runner.withProjectDir(getProjectDir())
        val result = runner.build();


        assertTrue(result.output.contains("Project version: 2.0.0-SNAPSHOT"))
    }
}
